---
description: 
globs: 
alwaysApply: true
---
# React 프로젝트 코딩 규칙 및 원칙

## 1. 단일 책임 원칙 (SRP)

- **컴포넌트 단일 책임**: 각 컴포넌트는 한 가지 기능에만 집중해야 합니다.
- **유틸리티 함수 분리**: 유틸리티 함수는 논리적 카테고리별로 분리합니다.

## 2. 관심사 분리

- **비즈니스 로직과 UI 분리**: 비즈니스 로직은 hooks, contexts, services로 분리합니다.

## 3. React 컴포넌트 원칙

- **함수형 컴포넌트 사용**: 클래스형보다 함수형 컴포넌트 사용을 권장합니다.
- **컴포넌트 합성**: 상속 대신 합성으로 재사용성을 높입니다.
- **Props 검증**: PropTypes 또는 TypeScript로 props를 엄격하게 검증합니다.

## 4. 상태 관리

- **지역 vs 전역 상태**: 컴포넌트 지역 상태는 useState, 여러 컴포넌트 공유는 Context API 사용하세요.
- **단방향 데이터 흐름**: 상태는 항상 위에서 아래로 흘러야 합니다.
- **불변성 유지**: 상태 업데이트는 항상 불변성을 지켜야 합니다.

## 5. 성능 최적화

- **메모이제이션**: useMemo, useCallback을 필요한 경우에 사용합니다.
- **가상 리스트**: 대량의 리스트는 windowing 기법을 사용합니다.
- **지연 로딩**: React.lazy와 Suspense로 코드 분할합니다.

## 6. 코드 가독성

- **의미 있는 이름**: 변수, 함수명은 명확하고 설명적이어야 합니다.
- **주석 사용**: 복잡한 로직에만 주석을 추가합니다. 자명한 코드에는 주석을 지양합니다.

## 7. 확장성 고려

- **플러그인 아키텍처**: 핵심 기능은 플러그인으로 확장 가능하게 설계합니다.
- **설정 기반 기능**: 하드코딩보다 설정 객체를 통한 기능 활성화를 권장합니다.

## 8. 라이브러리 사용 규칙

- **HTTP 요청**: axios 대신 fetch API를 사용해주세요.