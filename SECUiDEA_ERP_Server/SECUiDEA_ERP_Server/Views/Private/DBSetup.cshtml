@using System.Globalization
@using SECUiDEA_ERP_Server.Models.ResultModels
@using SECUiDEA_ERP_Server.Models.ControllerModels.Private
@using InputType = SECUiDEA_ERP_Server.Models.ControllerModels.InputType
@model List<DBSetupViewModel>

@{
    Layout = null;
    
    var lngCookie = Context.Request.Cookies["i18next"];
    var currentCulture = CultureInfo.CurrentCulture.Name;
    var serverLanguage = currentCulture.Split('-')[0]; // "ko-KR" -> "ko" 형태로 변환

    var language = !string.IsNullOrEmpty(lngCookie) ? lngCookie : serverLanguage;
}

<!DOCTYPE html>
<html lang="@language">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title data-i18n="DB.데이터베이스_설정">Database Setup</title>

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/lib/sweetalert2/sweetalert2.min.css" />
    <link rel="stylesheet" href="~/css/font.css" asp-append-version="true" />

    <script type="text/javascript" src="/lib/jquery/dist/jquery.min.js" defer="defer" asp-append-version="true"></script>
    <script type="text/javascript" src="/lib/bootstrap/dist/js/bootstrap.bundle.min.js" defer="defer" asp-append-version="false"></script>
    <script type="text/javascript" src="/lib/sweetalert2/sweetalert2.all.min.js" defer="defer"></script>

    <style>
        html, body {
            height:100%;
            margin: 0;
            padding: 0;
        }

        body {
            background: #fdfdfd;
        }

        section {
            display: flex;
            flex-direction: column;
            flex: 1;
            justify-content: center;
            min-height: 100vh;
        }

        .db-setup-container .card {
            border-color: #4f657b;
        }

        .db-setup-container .card-header {
            background-color: #1a4977;
            color: white;
        }

        .db-setup-container .input-group-text {
            background-color: #f8f9fa;
            border-color: #dee2e6;
            color: #495057;
        }

        .db-setup-container .card-footer {
            background-color: #f8f9fa;
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
        }

        .db-setup-container .btn-test {
            background-color: #2d6da3;
            border-color: #2d6da3;
            color: white;
        }

            .db-setup-container .btn-test:hover {
                background-color: #235780;
                border-color: #235780;
            }

        .db-setup-container .btn-save {
            background-color: #40916c;
            border-color: #40916c;
            color: white;
        }

            .db-setup-container .btn-save:hover {
                background-color: #2d6a4f;
                border-color: #2d6a4f;
            }
            
        .language-selector {
            position: fixed;
            top: 15px;
            right: 15px;
            z-index: 1000;
        }
        
        .language-selector select {
            padding: 6px 12px;
            border-radius: 4px;
            border: 1px solid #ced4da;
            background-color: white;
            color: #495057;
            font-size: 14px;
        }
    </style>

    <script type="text/javascript" src="~/js/DBSetup.min.js" asp-append-version="true"></script>
    <script type="text/javascript">
        const dbSetup = new DBSetupManager({
            testConnectionURL: '/Private/TestConnection',
            saveSingleURL: '/Private/SaveSingleDBSetup',
            formPrefix: "dbSetupForm_",
            databaseType: "databaseType",
            sectionNameKey: "sectionName",
            settingsPrefix: "connectionSettings"
        });

        async function testConnection(index) {
            try {
                const response = await dbSetup.testConnection(index);
                if (response.isSuccess === true) {
                    const translatedMessage = i18next.t(response.message, response.data || {});
                    Swal.fire(i18next.t('기본.성공'), translatedMessage, 'success');
                } else {
                    const translatedMessage = i18next.t(response.message, response.data || {});
                    Swal.fire(i18next.t('기본.실패'), translatedMessage, 'error');
                }
            } catch (e) {
                Swal.fire(i18next.t('기본.실패'), i18next.t('response:오류.서버와 통신하는 동안 {{what}}가 발생했습니다.', { what: i18next.t('기본.오류') }), 'error');
            }
        }

        async function saveSingleSetup(index) {
            try {
                const response = await dbSetup.saveSingleSetup(index);
                if (response.isSuccess === true) {
                    const translatedMessage = i18next.t(response.message, response.data || {});
                    Swal.fire(i18next.t('기본.성공'), translatedMessage, 'success');
                } else {
                    const translatedMessage = i18next.t(response.message, response.data || {});
                    Swal.fire(i18next.t('기본.실패'), translatedMessage, 'error');
                }
            } catch (e) {
                Swal.fire(i18next.t('기본.실패'), i18next.t('response:오류.서버와 통신하는 동안 {{what}}가 발생했습니다.', { what: i18next.t('기본.오류') }), 'error');
            }
        }
    </script>
</head>
<body class="d-flex flex-column">
    <!-- 언어 선택 셀렉트박스 -->
    <div class="language-selector">
        <select id="language-select" onchange="changeLanguage(this.value)">
            @if (language == "ko")
            {
                <option value="ko" selected>한국어</option>
            }
            else
            {
                <option value="ko">한국어</option>
            }
            
            @if (language == "en")
            {
                <option value="en" selected>English</option>
            }
            else
            {
                <option value="en">English</option>
            }
        </select>
    </div>
    
    <section class="background">
        <div class="d-flex flex-column justify-content-center align-items-center">
            <div class="db-setup-container col-md-6 col-xl-5 col-xxl-4">
                @for (var i = 0; i < Model.Count; i++)
                {
                    var settings = Model[i].GetSettingDefinitions();

                    <div class="card mb-3">
                        <div class="card-header">
                            <h5 class="mb-0">@Model[i].sectionName (@Model[i].databaseType)</h5>
                        </div>
                        <div class="card-body">
                            <form id="dbSetupForm_@i">
                                <input type="hidden" asp-for="@Model[i].sectionName" name="sectionName" />
                                <input type="hidden" asp-for="@Model[i].databaseType" name="databaseType" />

                                @foreach (var setting in settings)
                                {
                                    <div class="input-group">
                                        <label class="input-group-text" style="min-width: 150px;">@setting.Key</label>
                                        @switch (setting.Type)
                                        {
                                            case InputType.Select:
                                                {
                                                    <select class="form-select"
                                                            name="connectionSettings[@setting.Key]">
                                                        @foreach (var option in setting.Options)
                                                        {
                                                            <option value="@option" selected="@(option == setting.Value)">@option</option>
                                                        }
                                                    </select>
                                                }
                                                break;
                                            case InputType.Password:
                                                {
                                                    <input type="password"
                                                           class="form-control"
                                                           name="connectionSettings[@setting.Key]"
                                                           value="@setting.Value" />
                                                }
                                                break;
                                            default:
                                                {
                                                    <input type="text"
                                                           class="form-control"
                                                           name="connectionSettings[@setting.Key]"
                                                           value="@setting.Value" />
                                                }
                                                break;
                                        }
                                    </div>
                                }
                            </form>
                        </div>
                        <div class="card-footer text-end">
                            <button type="button"
                                    class="btn btn-test"
                                    onclick="testConnection(@i)"
                                    data-i18n="DB.연결테스트">
                                연결 테스트
                            </button>
                            <button type="button"
                                    class="btn btn-save"
                                    onclick="saveSingleSetup(@i)"
                                    data-i18n="기본.저장">
                                저장
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>
    
    <!-- i18n 라이브러리 로드 -->
    <script src="~/lib/i18next/i18next.min.js"></script>
    <script src="~/lib/i18next-http-backend/i18nextHttpBackend.min.js"></script>

    <script>
        const currentLanguage = "@language";

        i18next
        .use(i18nextHttpBackend)
        .init({
            lng: currentLanguage,
            fallbackLng: "ko",
            returnNull: false,
            returnEmptyString: false,
            ns: ["translation", "response"],
            defaultNS: "translation",
            detection: {
                order: ['localStorage', 'cookie', 'sessionStorage', 'navigator', 'htmlTag'],
                lookupLocalStorage: 'i18nextLng',
                lookupCookie: 'i18next',
                lookupSessionStorage: 'i18nextLng',
                caches: ['localStorage', 'cookie', 'sessionStorage']
            },
            backend: {
                loadPath: "/locales/{{lng}}/{{ns}}.json"
            },
            interpolation: {
                escapeValue: false
            }
        }, function(err, t) {
            // i18next 초기화 완료 후 실행되는 콜백
            if (err) {
                console.error('i18next initialization error:', err);
                return;
            }
            
            // 모든 data-i18n 속성을 가진 요소 번역
            translateElements();
        });

        // 번역 함수
        function translateElements() {
            document.querySelectorAll('[data-i18n]').forEach(function(element) {
                const key = element.dataset.i18n;

                if (element.dataset.i18nHtml) {
                    element.innerHTML = i18next.t(key);
                } else {
                    element.textContent = i18next.t(key);
                }
            });
        }

        window.t = function(key, options) {
            return i18next.t(key, options);
        };

        // 언어 변경 함수
        function changeLanguage(lng) {
            // 선택한 언어를 로컬 스토리지와 쿠키에 저장
            localStorage.setItem('i18nextLng', lng);
            document.cookie = `i18next=${lng}; path=/; max-age=31536000`; // 1년 유효
            
            // i18next 언어 변경
            i18next.changeLanguage(lng, function(err, t) {
                if (err) {
                    console.error('언어 변경 오류:', err);
                    return;
                }
                
                window.location.reload();
            });
        }

        // 페이지가 완전히 로드된 후 한 번 더 번역 작업 수행 (추가 보장책)
        document.addEventListener('DOMContentLoaded', function() {
            // i18next가 이미 초기화되었는지 확인
            if (i18next.isInitialized) {
                translateElements();
            }
        });
    </script>
</body>
</html>