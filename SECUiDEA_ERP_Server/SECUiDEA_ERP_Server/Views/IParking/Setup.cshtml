@using System.Globalization
@using SECUiDEA_ERP_Server.Models.ResultModels
@using SECUiDEA_ERP_Server.Models.ControllerModels.Private
@model APISetupViewModel

@{
    Layout = null;

    var lngCookie = Context.Request.Cookies["i18next"];
    var currentCulture = CultureInfo.CurrentCulture.Name;
    var serverLanguage = currentCulture.Split('-')[0]; // "ko-KR" -> "ko" 형태로 변환

    var language = !string.IsNullOrEmpty(lngCookie) ? lngCookie : serverLanguage;
}

<!DOCTYPE html>
<html lang="@language">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <title data-i18n="API.API설정">Api Setup</title>

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="~/lib/sweetalert2/sweetalert2.min.css"/>
    <link rel="stylesheet" href="~/css/font.css" asp-append-version="true"/>

    <script type="text/javascript" src="/lib/jquery/dist/jquery.min.js" defer="defer"
            asp-append-version="true"></script>
    <script type="text/javascript" src="/lib/bootstrap/dist/js/bootstrap.bundle.min.js" defer="defer"
            asp-append-version="false"></script>
    <script type="text/javascript" src="/lib/sweetalert2/sweetalert2.all.min.js" defer="defer"></script>

    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        body {
            background: #fdfdfd;
        }

        section {
            display: flex;
            flex-direction: column;
            flex: 1;
            justify-content: center;
            min-height: 100vh;
        }

        .card {
            border-color: #4f657b;
        }

        .card-header {
            background-color: #1a4977;
            color: white;
        }

        .input-group-text {
            background-color: #f8f9fa;
            border-color: #dee2e6;
            color: #495057;
        }

        .card-footer {
            background-color: #f8f9fa;
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
        }

        .btn-test {
            background-color: #2d6da3;
            border-color: #2d6da3;
            color: white;
        }

        .btn-test:hover {
            background-color: #235780;
            border-color: #235780;
        }

        .btn-save {
            background-color: #40916c;
            border-color: #40916c;
            color: white;
        }

        .btn-save:hover {
            background-color: #2d6a4f;
            border-color: #2d6a4f;
        }

        .language-selector {
            position: fixed;
            top: 15px;
            right: 15px;
            z-index: 1000;
        }

        .language-selector select {
            padding: 6px 12px;
            border-radius: 4px;
            border: 1px solid #ced4da;
            background-color: white;
            color: #495057;
            font-size: 14px;
        }
    </style>
</head>
<body class="d-flex flex-column">
<!-- 언어 선택 셀렉트박스 -->
<div class="language-selector">
    <select id="language-select" onchange="changeLanguage(this.value)">
        @if (language == "ko")
        {
            <option value="ko" selected>한국어</option>
        }
        else
        {
            <option value="ko">한국어</option>
        }

        @if (language == "en")
        {
            <option value="en" selected>English</option>
        }
        else
        {
            <option value="en">English</option>
        }
    </select>
</div>

<section class="background">
    <div class="d-flex flex-column justify-content-center align-items-center">
        <div class="col-md-6 col-xl-5 col-xxl-4">
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0">@Model.SectionName</h5>
                </div>
                <div class="card-body">
                    <form id="setupForm" asp-controller="IParking" asp-action="saveSingleSetup" method="post">
                        <input type="hidden" asp-for="@Model.SectionName" name="sectionName"/>
                        @{ var baseUrl = Model.BaseUrl; }
                        @{ var endpoints = Model.EndPoints; }
                        
                        <div class="input-group">
                            <label class="input-group-text" style="min-width: 150px;">BaseUrl</label>
                            <input type="text"
                                   class="form-control"
                                   name="baseUrl"
                                   value="@baseUrl"/>
                        </div>
                        
                        @foreach (var endpoint in endpoints)
                        {
                            <div class="input-group">
                                <label class="input-group-text" style="min-width: 150px;">@endpoint.Key</label>
                                <input type="text"
                                       class="form-control"
                                       name="EndPoints[@endpoint.Key]"
                                       value="@endpoint.Value"/>
                            </div>
                        }
                    </form>
                </div>
                <div class="card-footer text-end">
                    <button type="submit"
                            form="setupForm"
                            class="btn btn-save"
                            data-i18n="기본.저장">
                        저장
                    </button>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- i18n 라이브러리 로드 -->
<script src="~/lib/i18next/i18next.min.js"></script>
<script src="~/lib/i18next-http-backend/i18nextHttpBackend.min.js"></script>

<script>
    const currentLanguage = "@language";

    i18next
        .use(i18nextHttpBackend)
        .init({
            lng: currentLanguage,
            fallbackLng: "ko",
            returnNull: false,
            returnEmptyString: false,
            ns: ["translation", "response"],
            defaultNS: "translation",
            detection: {
                order: ['localStorage', 'cookie', 'sessionStorage', 'navigator', 'htmlTag'],
                lookupLocalStorage: 'i18nextLng',
                lookupCookie: 'i18next',
                lookupSessionStorage: 'i18nextLng',
                caches: ['localStorage', 'cookie', 'sessionStorage']
            },
            backend: {
                loadPath: "/locales/{{lng}}/{{ns}}.json"
            },
            interpolation: {
                escapeValue: false
            }
        }, function (err, t) {
            // i18next 초기화 완료 후 실행되는 콜백
            if (err) {
                console.error('i18next initialization error:', err);
                return;
            }

            // 모든 data-i18n 속성을 가진 요소 번역
            translateElements();
        });

    // 번역 함수
    function translateElements() {
        document.querySelectorAll('[data-i18n]').forEach(function (element) {
            const key = element.dataset.i18n;

            if (element.dataset.i18nHtml) {
                element.innerHTML = i18next.t(key);
            } else {
                element.textContent = i18next.t(key);
            }
        });
    }

    window.t = function (key, options) {
        return i18next.t(key, options);
    };

    // 언어 변경 함수
    function changeLanguage(lng) {
        // 선택한 언어를 로컬 스토리지와 쿠키에 저장
        localStorage.setItem('i18nextLng', lng);
        document.cookie = `i18next=${lng}; path=/; max-age=31536000`; // 1년 유효

        // i18next 언어 변경
        i18next.changeLanguage(lng, function (err, t) {
            if (err) {
                console.error('언어 변경 오류:', err);
                return;
            }

            window.location.reload();
        });
    }

    // 페이지가 완전히 로드된 후 한 번 더 번역 작업 수행 (추가 보장책)
    document.addEventListener('DOMContentLoaded', function () {
        // i18next가 이미 초기화되었는지 확인
        if (i18next.isInitialized) {
            translateElements();
        }
    });
</script>
</body>
</html>