"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value)})}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};class DBSetupManager{constructor(config){this.config=config;this.keyPattern=config.keyPattern||new RegExp(`${config.settingsPrefix}\\[(.*?)\\]`)}testConnection(index){return __awaiter(this,void 0,void 0,function*(){const formData=this.getFormData(index);if(!formData){throw new Error("Form not found")}const requestData=this.createRequestData(formData);if(!requestData){throw new Error("Invalid request data")}return this.sendRequest(this.config.testConnectionURL,requestData)})}saveSingleSetup(index){return __awaiter(this,void 0,void 0,function*(){const formData=this.getFormData(index);if(!formData){throw new Error("Form not found")}const requestData=this.createRequestData(formData);if(!requestData){throw new Error("Invalid request data")}return this.sendRequest(this.config.saveSingleURL,requestData)})}getFormData(index){const form=document.getElementById(`${this.config.formPrefix}${index}`);if(!form){console.error(`Form not found: ${this.config.formPrefix}${index}`);return null}return new FormData(form)}createRequestData(formData){try{const settings={};for(const[key,value]of formData.entries()){if(key.startsWith(this.config.settingsPrefix)){const match=key.match(this.keyPattern);if(match&&match[1]){settings[match[1]]=value}}}const databaseType=formData.get(this.config.databaseType);const sectionName=formData.get(this.config.sectionNameKey);if(!sectionName||!databaseType){throw new Error("Invalid request data")}return{sectionName:sectionName,databaseType:databaseType,connectionSettings:settings}}catch(e){console.error(e);return null}}sendRequest(url,data){return __awaiter(this,void 0,void 0,function*(){const response=yield fetch(url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(data)});if(!response.ok){throw new Error("Failed to send request")}return response.json()})}}